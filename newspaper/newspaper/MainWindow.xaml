<Window x:Class="newspaper.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:newspaper"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="816">
    <Grid>
        
        <Grid.RowDefinitions>
            <RowDefinition Height="39*"/>
            <RowDefinition Height="35*"/>
            <RowDefinition Height="18*"/>
            <RowDefinition Height="327*"/>
        </Grid.RowDefinitions>
        <StackPanel Grid.Row="1" Orientation="Horizontal">
                <Button Width="100" Grid.Column="0">Top News</Button>
                <Button Width="100" Grid.Column="1" >Local</Button>
                <Button Width="100" Grid.Column="2" >Nation/World</Button>
                <Button Width="100" Grid.Column="3" >Busineses/Tech</Button>
                <Button Width="100" Grid.Column="4" >Sports</Button>
                <Button Width="100" Grid.Column="5" >Life</Button>
                <Button Width="100" Grid.Column="6" >Option</Button>
            <Button Width="100" Grid.Column="7" >Most Read</Button>
        </StackPanel>
        <TextBlock TextAlignment="Center" Grid.Row="2" Background="Black" Foreground="White" Grid.ColumnSpan="8">
            Tuesday,February,22,2007 &#9660;
        </TextBlock>
        <FlowDocumentScrollViewer Grid.Row="3">
            <FlowDocument PagePadding="0" >
                <Table>
                    <TableRowGroup>
                        <TableRow>
                            <TableCell>
                                <Paragraph>
                                    Первые две кнопки получают минимальные размеры и соответствующим образом выровнены, в то время как две нижние кнопки растянуты на всю StackPanel. Изменив размер окна, вы увидите, что метка остается в середине, а первые две кнопки будут прижаты каждая к своей стороне.
StackPanel также имеет собственные свойства HorizontalAlignment и VerticalAlignment. По умолчанию оба они установлены в Stretch, и потому StackPanel заполняет свой контейнер полностью. В данном примере это значит, что StackPanel заполняет окно. Если используются другие установки, максимальный размер StackPanel будет определяться самым широким элементом управления, содержащимся в нем.
                                </Paragraph> 
                            </TableCell>
                            <TableCell ColumnSpan="2">
                                <Table>
                                    <TableRowGroup>
                                        <TableRow>
                                            <TableCell >
                                                <Paragraph>
                                                    djffgdsjjs
                                                </Paragraph>

                                            </TableCell>
                                        </TableRow>
                                        <TableRow>
                                            <TableCell>
                                                <Paragraph>
                                                    В текущей форме примера StackPanel присутствует очевидная проблема. Хорошо спроектированное окно должно содержать не только элементы; оно также содержит немного дополнительного пространства между элементами. Чтобы ввести это дополнительное пространство и сделать пример StackPanel менее сжатым, можно установить поля вокруг элементов управления.
                                                </Paragraph>
                                            </TableCell>
                                            <TableCell>
                                                <Paragraph>
                                                    Определение правильных полей вокруг элементов управления — отчасти искусство, потому что необходимо учитывать, каким образом установки полей для соседних элементов управления влияют друг на друга. Например, если есть две кнопки, уложенные одна на другую, и верхняя кнопка имеет нижнее поле размером 5, а нижняя кнопка — верхнее поле размером 5, то между двумя кнопками получится пространство в 10 единиц.
                                                </Paragraph>
                                            </TableCell>
                                        </TableRow>
                                    </TableRowGroup>
                                </Table>
                            </TableCell>
                            <TableCell>
                                <Paragraph>
                                    Подумайте дважды, прежде чем устанавливать явные размеры в WPF. В хорошо спроектированной компоновке подобная необходимость возникать не должна. Если вы добавляете информацию о размерах, то рискуете создать хрупкую компоновку, которая не сможет адаптироваться к изменениям (вроде разных языков и размеров окна) и будет усекать содержимое.
                                </Paragraph>
                            </TableCell>
                        </TableRow>
                    </TableRowGroup>
                </Table>
            </FlowDocument>
        </FlowDocumentScrollViewer>
    </Grid>
</Window>
